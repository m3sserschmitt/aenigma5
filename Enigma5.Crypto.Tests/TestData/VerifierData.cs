/*
    Aenigma - Federal messaging system
    Copyright (C) 2024  Romulus-Emanuel Ruja <romulus-emanuel.ruja@tutanota.com>

    This file is part of Aenigma project.

    Aenigma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Aenigma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Aenigma.  If not, see <https://www.gnu.org/licenses/>.
*/

using System.Collections;
using Enigma5.Crypto.DataProviders;

namespace Enigma5.Crypto.Tests.TestData;

public class VerifierData: IEnumerable<object[]>
{
    IEnumerator IEnumerable.GetEnumerator()
    {
        throw new NotImplementedException();
    }

    IEnumerator<object[]> IEnumerable<object[]>.GetEnumerator()
    {
        yield return new object[] {
            new byte[] { 3, 4, 7, 1, 3, 2, 9, 7, 122, 157, 245, 147, 231, 13, 139, 217, 249, 39, 232, 34, 124, 41, 69, 194, 147, 228, 22, 158, 96, 92, 193, 174, 40, 50, 171, 174, 91, 27, 255, 10, 198, 206, 223, 12, 82, 104, 54, 133, 69, 38, 241, 24, 97, 195, 203, 6, 232, 119, 116, 101, 40, 180, 245, 5, 46, 129, 209, 84, 149, 175, 164, 135, 17, 217, 3, 171, 11, 119, 198, 94, 25, 187, 134, 19, 13, 69, 97, 169, 165, 110, 198, 251, 20, 130, 183, 136, 239, 102, 53, 59, 159, 217, 53, 212, 100, 111, 248, 107, 87, 139, 88, 146, 135, 84, 190, 248, 249, 221, 218, 249, 107, 171, 15, 163, 226, 11, 186, 105, 127, 54, 72, 54, 212, 75, 122, 172, 155, 230, 161, 247, 117, 115, 172, 163, 145, 3, 46, 179, 193, 74, 27, 2, 12, 210, 6, 107, 60, 30, 167, 49, 187, 142, 36, 47, 9, 207, 187, 35, 28, 192, 206, 188, 241, 33, 83, 250, 133, 115, 208, 135, 39, 48, 138, 216, 232, 115, 142, 101, 109, 254, 125, 228, 206, 56, 118, 179, 132, 172, 62, 175, 60, 26, 227, 211, 217, 16, 59, 200, 193, 28, 255, 163, 21, 121, 149, 22, 166, 24, 223, 113, 54, 136, 74, 165, 41, 227, 221, 179, 114, 232, 189, 2, 241, 237, 47, 100, 208, 13, 223, 242, 72, 207, 230, 131, 185, 202, 186, 221, 226, 90, 214, 161, 96, 194, 171, 95, 179, 132, 141, 82, 87, 19, 162, 229 },
            PKey.PublicKey3,
            true
            };
        yield return new object[] {
            new byte[] { 5, 6, 7, 8, 3, 2, 101, 121, 130, 80, 165, 160, 177, 177, 21, 235, 172, 125, 176, 88, 129, 169, 236, 141, 91, 161, 243, 199, 147, 86, 27, 217, 241, 234, 160, 73, 237, 105, 126, 2, 66, 155, 213, 214, 43, 166, 15, 187, 230, 252, 71, 107, 53, 164, 97, 19, 110, 151, 249, 110, 126, 190, 156, 228, 182, 218, 140, 173, 64, 13, 174, 47, 214, 72, 133, 3, 102, 38, 47, 118, 230, 102, 175, 147, 119, 208, 191, 119, 148, 54, 60, 147, 250, 82, 200, 127, 116, 152, 192, 110, 44, 241, 243, 210, 10, 230, 3, 22, 34, 97, 157, 96, 119, 178, 182, 113, 170, 182, 202, 201, 229, 235, 188, 201, 104, 115, 6, 18, 144, 95, 229, 165, 253, 97, 128, 228, 99, 46, 81, 138, 50, 57, 196, 186, 90, 8, 235, 59, 210, 143, 183, 75, 198, 205, 166, 20, 193, 151, 133, 149, 149, 56, 37, 50, 105, 119, 246, 84, 38, 172, 66, 115, 91, 20, 202, 16, 151, 156, 68, 37, 1, 34, 185, 21, 215, 208, 172, 176, 175, 211, 225, 2, 132, 49, 184, 120, 72, 75, 175, 241, 28, 68, 145, 199, 172, 63, 4, 43, 45, 24, 224, 2, 82, 37, 102, 144, 193, 230, 215, 144, 178, 242, 146, 116, 60, 43, 22, 11, 112, 42, 199, 204, 249, 127, 19, 163, 104, 91, 193, 92, 169, 81, 28, 179, 10, 68, 200, 66, 134, 221, 240, 137, 146, 212, 241, 50, 209, 81, 187, 38, 67, 206 },
            PKey.PublicKey2,
            true
        };
        yield return new object[] {
            new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 35, 86, 17, 58, 0, 47, 183, 107, 138, 197, 164, 195, 35, 33, 221, 84, 88, 34, 102, 103, 199, 228, 145, 172, 157, 72, 16, 169, 222, 55, 226, 59, 138, 219, 114, 112, 238, 126, 224, 251, 22, 21, 210, 108, 101, 200, 166, 224, 19, 253, 226, 127, 129, 173, 8, 93, 164, 197, 201, 85, 32, 0, 40, 182, 56, 92, 106, 8, 127, 101, 139, 4, 157, 205, 244, 8, 192, 79, 171, 42, 34, 91, 199, 210, 85, 198, 94, 2, 237, 230, 38, 114, 177, 95, 244, 111, 36, 138, 69, 55, 253, 234, 93, 125, 158, 30, 213, 219, 83, 21, 211, 111, 4, 72, 77, 53, 204, 88, 218, 240, 84, 216, 40, 47, 163, 104, 145, 201, 200, 133, 228, 143, 157, 219, 248, 179, 53, 106, 52, 113, 200, 254, 240, 189, 154, 39, 144, 31, 210, 51, 169, 70, 172, 98, 41, 58, 1, 226, 232, 73, 171, 87, 106, 40, 168, 102, 252, 110, 38, 135, 31, 102, 196, 124, 33, 174, 230, 134, 48, 161, 52, 138, 124, 132, 75, 90, 118, 150, 7, 134, 134, 162, 205, 52, 115, 74, 143, 212, 159, 81, 219, 233, 59, 50, 231, 128, 198, 197, 171, 104, 101, 3, 74, 123, 50, 115, 139, 225, 69, 58, 36, 211, 152, 187, 144, 218, 48, 61, 56, 69, 50, 189, 1, 237, 41, 243, 147, 57, 95, 163, 152, 182, 155, 62, 232, 192, 133, 157, 155, 52, 169, 35, 121, 19, 172, 226, 15, 202, 179 },
            PKey.PublicKey1,
            true
        };
        yield return new object[] {
            new byte[] { 3, 4, 1, 1, 3, 2, 9, 7, 122, 157, 245, 147, 231, 13, 139, 217, 249, 39, 232, 34, 124, 41, 69, 194, 147, 228, 22, 158, 96, 92, 193, 174, 40, 50, 171, 174, 91, 27, 255, 10, 198, 206, 223, 12, 82, 104, 54, 133, 69, 38, 241, 24, 97, 195, 203, 6, 232, 119, 116, 101, 40, 180, 245, 5, 46, 129, 209, 84, 149, 175, 164, 135, 17, 217, 3, 171, 11, 119, 198, 94, 25, 187, 134, 19, 13, 69, 97, 169, 165, 110, 198, 251, 20, 130, 183, 136, 239, 102, 53, 59, 159, 217, 53, 212, 100, 111, 248, 107, 87, 139, 88, 146, 135, 84, 190, 248, 249, 221, 218, 249, 107, 171, 15, 163, 226, 11, 186, 105, 127, 54, 72, 54, 212, 75, 122, 172, 155, 230, 161, 247, 117, 115, 172, 163, 145, 3, 46, 179, 193, 74, 27, 2, 12, 210, 6, 107, 60, 30, 167, 49, 187, 142, 36, 47, 9, 207, 187, 35, 28, 192, 206, 188, 241, 33, 83, 250, 133, 115, 208, 135, 39, 48, 138, 216, 232, 115, 142, 101, 109, 254, 125, 228, 206, 56, 118, 179, 132, 172, 62, 175, 60, 26, 227, 211, 217, 16, 59, 200, 193, 28, 255, 163, 21, 121, 149, 22, 166, 24, 223, 113, 54, 136, 74, 165, 41, 227, 221, 179, 114, 232, 189, 2, 241, 237, 47, 100, 208, 13, 223, 242, 72, 207, 230, 131, 185, 202, 186, 221, 226, 90, 214, 161, 96, 194, 171, 95, 179, 132, 141, 82, 87, 19, 162, 229 },
            PKey.PublicKey3,
            false
        }; // byte modified in plaintext
        yield return new object[] {
            new byte[] { 3, 4, 1, 1, 3, 2, 9, 7, 122, 157, 245, 147, 231, 13, 139, 217, 249, 39, 232, 34, 124, 41, 69, 194, 147, 228, 22, 158, 96, 92, 193, 174, 40, 50, 171, 174, 91, 27, 255, 10, 198, 206, 223, 12, 82, 104, 54, 133, 69, 38, 241, 24, 97, 195, 203, 6, 232, 119, 116, 101, 40, 180, 245, 5, 46, 129, 209, 84, 149, 3, 164, 135, 17, 217, 3, 171, 11, 119, 198, 94, 25, 187, 134, 19, 13, 69, 97, 169, 165, 110, 198, 251, 20, 130, 183, 136, 239, 102, 53, 59, 159, 217, 53, 212, 100, 111, 248, 107, 87, 139, 88, 146, 135, 84, 190, 248, 249, 221, 218, 249, 107, 171, 15, 163, 226, 11, 186, 105, 127, 54, 72, 54, 212, 75, 122, 172, 155, 230, 161, 247, 117, 115, 172, 163, 145, 3, 46, 179, 193, 74, 27, 2, 12, 210, 6, 107, 60, 30, 167, 49, 187, 142, 36, 47, 9, 207, 187, 35, 28, 192, 206, 188, 241, 33, 83, 250, 133, 115, 208, 135, 39, 48, 138, 216, 232, 115, 142, 101, 109, 254, 125, 228, 206, 56, 118, 179, 132, 172, 62, 175, 60, 26, 227, 211, 217, 16, 59, 200, 193, 28, 255, 163, 21, 121, 149, 22, 166, 24, 223, 113, 54, 136, 74, 165, 41, 227, 221, 179, 114, 232, 189, 2, 241, 237, 47, 100, 208, 13, 223, 242, 72, 207, 230, 131, 185, 202, 186, 221, 226, 90, 214, 161, 96, 194, 171, 95, 179, 132, 141, 82, 87, 19, 162, 229 },
            PKey.PublicKey3,
            false  // byte modified in signature
        };
        yield return new object[] {
            new byte[] { 3, 4, 7, 1, 3, 2, 9, 7, 122, 157, 245, 147, 231, 13, 139, 217, 249, 39, 232, 34, 124, 41, 69, 194, 147, 228, 22, 158, 96, 92, 193, 174, 40, 50, 171, 174, 91, 27, 255, 10, 198, 206, 223, 12, 82, 104, 54, 133, 69, 38, 241, 24, 97, 195, 203, 6, 232, 119, 116, 101, 40, 180, 245, 5, 46, 129, 209, 84, 149, 175, 164, 135, 17, 217, 3, 171, 11, 119, 198, 94, 25, 187, 134, 19, 13, 69, 97, 169, 165, 110, 198, 251, 20, 130, 183, 136, 239, 102, 53, 59, 159, 217, 53, 212, 100, 111, 248, 107, 87, 139, 88, 146, 135, 84, 190, 248, 249, 221, 218, 249, 107, 171, 15, 163, 226, 11, 186, 105, 127, 54, 72, 54, 212, 75, 122, 172, 155, 230, 161, 247, 117, 115, 172, 163, 145, 3, 46, 179, 193, 74, 27, 2, 12, 210, 6, 107, 60, 30, 167, 49, 187, 142, 36, 47, 9, 207, 187, 35, 28, 192, 206, 188, 241, 33, 83, 250, 133, 115, 208, 135, 39, 48, 138, 216, 232, 115, 142, 101, 109, 254, 125, 228, 206, 56, 118, 179, 132, 172, 62, 175, 60, 26, 227, 211, 217, 16, 59, 200, 193, 28, 255, 163, 21, 121, 149, 22, 166, 24, 223, 113, 54, 136, 74, 165, 41, 227, 221, 179, 114, 232, 189, 2, 241, 237, 47, 100, 208, 13, 223, 242, 72, 207, 230, 131, 185, 202, 186, 221, 226, 90, 214, 161, 96, 194, 171, 95, 179, 132, 141, 82, 87, 19, 162, 229 },
            PKey.PublicKey1,
            false
        }; // valid signed data, wrong key
    }
}
